using System;
using System.Collections.Generic;
using System.Linq;
using Breeze.NHibernate;
using Breeze.NHibernate.Metadata;
using Newtonsoft.Json.Linq;
using NHibernate;
using NHibernate.Type;

namespace CoreSharp.Breeze.Tests
{
    /// <summary>
    /// Simulates the behavior of breeze entity manager in order to test saves without having a client
    /// </summary>
    public class BreezeEntityManager
    {
        private readonly IEntityMetadataProvider _entityMetadataProvider;
        private readonly Dictionary<Type, EntityTypeInfo> _typeEntities = new Dictionary<Type, EntityTypeInfo>();
        private ISessionProvider _sessionProvider;

        public BreezeEntityManager(IEntityMetadataProvider entityMetadataProvider)
        {
            _entityMetadataProvider = entityMetadataProvider;
        }

        internal void SetSessionProvider(ISessionProvider sessionProvider)
        {
            _sessionProvider = sessionProvider;
        }

        private class EntityInfo
        {
            public object Entity { get; set; }

            public object[] IdentifierValues { get; set; }

            public EntityState EntityState { get; set; }
        }

        private class EntityTypeInfo
        {
            public EntityTypeInfo(EntityMetadata entityMetadata)
            {
                EntityMetadata = entityMetadata;
                IdentifierTypes = entityMetadata.IdentifierPropertyTypes.Select(NHibernateUtil.GuessType).ToArray();
            }

            public EntityMetadata EntityMetadata { get; }

            public IType[] IdentifierTypes { get; }

            public readonly Dictionary<object, EntityInfo> EntitiesInfo = new Dictionary<object, EntityInfo>();

            public object CurrentId { get; set; }

            public void AddEntity(object entity, EntityState state)
            {
                if (EntitiesInfo.TryGetValue(entity, out var info))
                {
                    if (info.EntityState != state)
                    {
                        throw new InvalidOperationException("Invalid operation");
                    }

                    return;
                }

                var entityInfo = new EntityInfo
                {
                    Entity = entity,
                    EntityState = state,
                    IdentifierValues = EntityMetadata.IdentifierPropertyGetters.Select((func) => func(entity)).ToArray()
                };

                EntitiesInfo.Add(entity, entityInfo);
                if (EntityMetadata.AutoGeneratedKeyType == AutoGeneratedKeyType.None || state != EntityState.Added)
                {
                    return;
                }

                var type = EntityMetadata.EntityPersister.IdentifierType.ReturnedClass;
                if (type == typeof(long))
                {
                    var currentId = (long?)CurrentId ?? 0L;
                    CurrentId = currentId - 1;
                }

                EntityMetadata.EntityPersister.SetIdentifier(entity, CurrentId);
            }
        }

        public TEntity CreateEntity<TEntity>() where TEntity : new()
        {
            var entity = new TEntity();
            AddEntity(entity, EntityState.Added);

            return entity;
        }

        public void SetAdded<TEntity>(TEntity entity)
        {
            AddEntity(entity, EntityState.Added);
        }

        public void SetDeleted<TEntity>(TEntity entity)
        {
            AddEntity(entity, EntityState.Deleted);
        }

        public void SetModified<TEntity>(TEntity entity)
        {
            AddEntity(entity, EntityState.Modified);
        }

        public IEnumerable<TEntity> LocalQuery<TEntity>()
        {
            return _typeEntities.TryGetValue(typeof(TEntity), out var entityTypeInfo)
                ? entityTypeInfo.EntitiesInfo.Keys.Cast<TEntity>()
                : Enumerable.Empty<TEntity>();
        }

        public TEntity Get<TEntity>(object id)
        {
            return _sessionProvider.Get(typeof(TEntity)).Get<TEntity>(id);
        }

        public IQueryable<TEntity> Query<TEntity>()
        {
            return _sessionProvider.Get(typeof(TEntity)).Query<TEntity>();
        }

        public SaveBundle GetSaveBundle()
        {
            var entities = new List<JObject>();
            var saveBundle = new SaveBundle
            {
                Entities = entities,
                SaveOptions = new SaveOptions()
            };


            foreach (var pair in _typeEntities)
            {
                var session = _sessionProvider.Get(pair.Key);
                var sessionImpl = session.GetSessionImplementation();
                var context = sessionImpl.PersistenceContext;
                var entityType = pair.Key;
                var entityTypeInfo = pair.Value;
                var entityMetadata = entityTypeInfo.EntityMetadata;
                var persister = entityMetadata.EntityPersister;
                foreach (var entityInfo in entityTypeInfo.EntitiesInfo.Values)
                {
                    var entity = entityInfo.Entity;
                    var originalValues = new JObject();
                    var unmappedValues = new JObject();
                    var entityAspect = new JObject
                    {
                        ["entityTypeName"] = $"{entityType.Name}:#{entityType.Namespace}",
                        ["originalValuesMap"] = originalValues,
                        ["entityState"] = entityInfo.EntityState.ToString()

                    };
                    if (entityMetadata.AutoGeneratedKeyType != AutoGeneratedKeyType.None)
                    {
                        var autoGeneratedKey =
                            new JObject
                            {
                                ["propertyName"] = entityMetadata.IdentifierPropertyNames[0],
                                ["autoGeneratedKeyType"] = entityMetadata.AutoGeneratedKeyType.ToString()
                            };
                        entityAspect["autoGeneratedKey"] = autoGeneratedKey;
                    }

                    var entityData = new JObject();
                    for (var i = 0; i < entityMetadata.IdentifierPropertyNames.Count; i++)
                    {
                        var idPropertyName = entityMetadata.IdentifierPropertyNames[i];
                        var idValue = GetToken(entityMetadata.IdentifierPropertyGetters[i](entity));
                        if (entityMetadata.SyntheticForeignKeyProperties.ContainsKey(idPropertyName))
                        {
                            unmappedValues.Add(idPropertyName, idValue);
                        }
                        else
                        {
                            entityData.Add(idPropertyName, idValue);
                        }

                    }

                    var propertyTypes = persister.PropertyTypes;
                    for (var i = 0; i < propertyTypes.Length; i++)
                    {
                        var propertyType = propertyTypes[i];
                        var propertyName = persister.PropertyNames[i];
                        if (propertyType.IsCollectionType)
                        {
                            continue;
                        }

                        var currentValue = persister.GetPropertyValue(entity, i);
                        if (entityMetadata.Associations.TryGetValue(propertyName, out var association))
                        {
                            var associatedEntityMetadata = _entityMetadataProvider.GetMetadata(association.EntityType);
                            for (var j = 0; j < association.ForeignKeyPropertyNames.Count; j++)
                            {
                                var fkValue = currentValue != null ? associatedEntityMetadata.IdentifierPropertyGetters[j](currentValue) : null;
                                var fkPropertyName = association.ForeignKeyPropertyNames[j];
                                if (entityMetadata.SyntheticForeignKeyProperties.ContainsKey(fkPropertyName))
                                {
                                    unmappedValues.Add(fkPropertyName, GetToken(fkValue));
                                }
                            }

                            continue;
                        }

                        entityData.Add(propertyName, GetToken(currentValue));
                    }

                    if (context.IsEntryFor(entity))
                    {
                        var entry = context.GetEntry(entity);
                        var idTypes = entityTypeInfo.IdentifierTypes;
                        for (var i = 0; i < idTypes.Length; i++)
                        {
                            var newId = entityMetadata.IdentifierPropertyGetters[i](entity);
                            if (idTypes[i].IsDirty(entityInfo.IdentifierValues[i], newId, sessionImpl))
                            {
                                originalValues[entityMetadata.IdentifierPropertyNames[i]] = GetToken(newId);
                            }
                        }

                        for (var i = 0; i < propertyTypes.Length; i++)
                        {
                            var propertyType = propertyTypes[i];
                            if (propertyType.IsCollectionType)
                            {
                                continue;
                            }

                            var propertyName = persister.PropertyNames[i];
                            var originalValue = entry.LoadedState[i];
                            var currentValue = persister.GetPropertyValue(entity, i);
                            if (!propertyTypes[i].IsDirty(originalValue, currentValue, sessionImpl))
                            {
                                continue;
                            }

                            if (entityMetadata.Associations.TryGetValue(propertyName, out var association))
                            {
                                foreach (var fkProperty in association.ForeignKeyPropertyNames)
                                {
                                    if (entityMetadata.SyntheticForeignKeyProperties.TryGetValue(fkProperty, out var syntheticProperty))
                                    {
                                        originalValues[fkProperty] = GetToken(syntheticProperty.GetIdentifierFunction(originalValue));
                                    }
                                }
                            }
                            else
                            {
                                originalValues[propertyName] = GetToken(originalValue);
                            }
                        }
                    }

                    entityData.Add("__unmapped", unmappedValues);
                    entityData.Add("entityAspect", entityAspect);
                    entities.Add(entityData);
                }
            }

            return saveBundle;
        }

        public void Clear()
        {
            _typeEntities.Clear();
        }

        private void AddEntity<TEntity>(TEntity entity, EntityState state)
        {
            if (entity == null)
            {
                return;
            }

            if (!_typeEntities.TryGetValue(typeof(TEntity), out var entityTypeInfo))
            {
                entityTypeInfo = new EntityTypeInfo(_entityMetadataProvider.GetMetadata(typeof(TEntity)));
                _typeEntities.Add(typeof(TEntity), entityTypeInfo);
            }

            var persister = entityTypeInfo.EntityMetadata.EntityPersister;
            if (state == EntityState.Modified && persister.IsVersioned)
            {
                // Simulate breeze js behavior by increasing the version number
                var version = persister.GetPropertyValue(entity, persister.VersionProperty);
                persister.SetPropertyValue(entity, persister.VersionProperty, persister.VersionType.Next(version, null));
            }

            entityTypeInfo.AddEntity(entity, state);
        }
        private static JToken GetToken(object value)
        {
            return value == null ? null : JToken.FromObject(value);
        }
    }
}
